import turtle as tu
import re
import docx

# Name of the coordinates file
source = "c:/Users/Harsh Parate/Desktop/codelover77/python/tom_and_jerry.docx"  # Ensure the file "tom_and_jerry.docx" is in the same directory as this script

# Read the document
try:
    # data = docx.Document(f"{source}.docx")
    data = docx.Document(source)
except Exception as e:
    print(f"Error loading document: {e}")
    exit()

coordinates = []
colours = []

# Parse the coordinates and colors from the document
for paragraph in data.paragraphs:
    try:
        coord_str_tuples = re.findall(r'\([-+]?\d*\.\d*(?:[eE][-+]?\d+)? ?, ?[-+]?\d*\.\d*(?:[eE][-+]?\d+)?\)', paragraph.text)
        color_str_tuples = re.findall(r'\([-+]?\d*\.\d*(?:[eE][-+]?\d+)? ?, ?[-+]?\d*\.\d*(?:[eE][-+]?\d+)? ?, ?[-+]?\d*\.\d*(?:[eE][-+]?\d+)?\)', paragraph.text)

        if color_str_tuples:
            color_values = re.findall(r'[-+]?\d*\.\d*', color_str_tuples[0])
            color_value_list = [float(k) for k in color_values]
            colours.append(tuple(color_value_list))

        coord_num_tuples = []
        for coord_str in coord_str_tuples:
            coord_pos = re.findall(r'[-+]?\d*\.\d*', coord_str)
            coord_num_list = [float(k) for k in coord_pos]
            coord_num_tuples.append(tuple(coord_num_list))

        if coord_num_tuples:
            coordinates.append(coord_num_tuples)

    except Exception as e:
        print(f"Error parsing paragraph: {paragraph.text}\nError: {e}")
        pass

# Set up the turtle graphics
pen = tu.Turtle()
screen = tu.Screen()
tu.tracer(2)
pen.speed(0)
screen.getcanvas().winfo_toplevel().attributes("-fullscreen", True)

# Draw the shapes based on the parsed coordinates and colors
for i in range(len(coordinates)):
    path = coordinates[i]
    col = colours[i] if i < len(colours) else (0, 0, 0)  # Default color black if not enough colors

    pen.color(col)
    pen.begin_fill()

    for j, order_pair in enumerate(path):
        x, y = order_pair
        y = -1 * y  # Inverting y-coordinate for turtle graphics

        if j == 0:
            pen.up()
            pen.goto(x, y)
            pen.down()
        else:
            pen.goto(x, y)

    pen.end_fill()

pen.hideturtle()
screen.mainloop()
